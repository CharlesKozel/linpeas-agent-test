#!/usr/bin/env python3
"""
LLM-Assisted Penetration Testing Agent with linPEAS
Interactive LLM-to-SSH agent that continuously asks the LLM for commands to execute
"""

import argparse
import logging
import sys
from pathlib import Path
from typing import Optional, List, Tuple

from InteractivePentestAgent import InteractivePentestAgent
from colorama import init, Fore, Style

# Initialize colorama for cross-platform colored output
init()

def main():
    parser = argparse.ArgumentParser(
        description="Interactive LLM-to-SSH Penetration Testing Agent",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s --target 192.168.1.100 --username user --password pass
  %(prog)s --target 10.0.0.50 --username ubuntu --key-file ~/.ssh/id_rsa
  %(prog)s --target example.com --username root --password secret --port 2222 --max-iterations 30

This agent will:
1. Connect to the target system via SSH
2. Continuously ask an LLM (GPT-4) for the next command to execute
3. Display the command and reasoning to the user for approval
4. Execute approved commands and show results
5. Use the command output to inform the next LLM decision
6. Continue until privilege escalation is achieved or max iterations reached

Safety Features:
- All commands require human approval
- Built-in safety validation for dangerous commands
- Comprehensive logging and audit trail
- Automatic cleanup of artifacts

IMPORTANT: Only use this tool on systems you own or have explicit authorization to test!
        """
    )
    
    parser.add_argument("--target", required=True, help="Target IP address or hostname")
    parser.add_argument("--username", required=True, help="SSH username")
    parser.add_argument("--password", help="SSH password")
    parser.add_argument("--key-file", help="SSH private key file path")
    parser.add_argument("--port", type=int, default=22, help="SSH port (default: 22)")
    parser.add_argument("--max-iterations", type=int, default=50, 
                       help="Maximum number of command iterations (default: 50)")
    parser.add_argument("--goal", default="Achieve privilege escalation using linPEAS and available techniques",
                       help="Custom goal for the penetration test")
    
    args = parser.parse_args()
    
    # Validate arguments
    if not args.password and not args.key_file:
        print(f"{Fore.RED}Error: Must provide either --password or --key-file{Style.RESET_ALL}")
        print("Use --help for usage examples")
        sys.exit(1)
    
    # Display banner
    print(f"""
{Fore.CYAN}╔══════════════════════════════════════════════════════════════════════════════╗
║                    🤖 Interactive LLM-to-SSH Pentest Agent                   ║
║                          Automated Privilege Escalation                      ║
╚══════════════════════════════════════════════════════════════════════════════╝{Style.RESET_ALL}

{Fore.YELLOW}⚠️  LEGAL WARNING: Only use this tool on systems you own or have explicit 
   written authorization to test. Unauthorized testing is illegal!{Style.RESET_ALL}

Target: {args.target}
User: {args.username}
Max Iterations: {args.max_iterations}
""")
    
    # Confirm before starting
    try:
        confirm = input(f"{Fore.WHITE}Do you have authorization to test this target? (yes/no): {Style.RESET_ALL}")
        if confirm.lower() not in ['yes', 'y']:
            print(f"{Fore.RED}Authorization not confirmed. Exiting.{Style.RESET_ALL}")
            sys.exit(1)
    except KeyboardInterrupt:
        print(f"\n{Fore.RED}Cancelled by user{Style.RESET_ALL}")
        sys.exit(1)
    
    # Create and run agent
    agent = InteractivePentestAgent(
        target_ip=args.target,
        username=args.username,
        password=args.password,
        key_file=args.key_file,
        port=args.port,
        max_iterations=args.max_iterations
    )
    
    # Run the interactive session
    success = agent.start_interactive_session()
    
    print(f"\n{Fore.CYAN}Thank you for using the Interactive LLM-to-SSH Pentest Agent!{Style.RESET_ALL}")
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()